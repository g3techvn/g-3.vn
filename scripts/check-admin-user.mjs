import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';

// Load environment variables
config({ path: '.env.local' });

// Kh·ªüi t·∫°o Supabase client
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Missing Supabase environment variables');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function checkAdminUser() {
  console.log('üîç ƒêang ki·ªÉm tra t√†i kho·∫£n admin...\n');

  try {
    // Ki·ªÉm tra b·∫£ng user_profiles tr∆∞·ªõc
    console.log('üìã KI·ªÇM TRA B·∫¢NG user_profiles:');
    console.log('=' * 50);
    
    const { data: profiles, error: profilesError } = await supabase
      .from('user_profiles')
      .select('*')
      .eq('email', 'thanhtrang16490@gmail.com');

    if (profilesError) {
      console.error('‚ùå L·ªói khi query user_profiles:', profilesError);
    } else {
      console.log('‚úÖ K·∫øt qu·∫£ t·ª´ user_profiles:');
      console.log(JSON.stringify(profiles, null, 2));
    }

    // Ki·ªÉm tra b·∫£ng users n·∫øu c√≥
    console.log('\nüìã KI·ªÇM TRA B·∫¢NG users:');
    console.log('=' * 50);
    
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('*')
      .eq('email', 'thanhtrang16490@gmail.com');

    if (usersError) {
      console.error('‚ùå L·ªói khi query users:', usersError);
    } else {
      console.log('‚úÖ K·∫øt qu·∫£ t·ª´ users:');
      console.log(JSON.stringify(users, null, 2));
    }

    // Ki·ªÉm tra auth.users (n·∫øu c√≥ quy·ªÅn)
    console.log('\nüìã KI·ªÇM TRA AUTH METADATA:');
    console.log('=' * 50);
    
    const { data: authUser, error: authError } = await supabase.auth.getUser();
    if (authError) {
      console.log('‚ùå Kh√¥ng c√≥ session hi·ªán t·∫°i:', authError.message);
    } else {
      console.log('‚úÖ Current auth user:');
      console.log(JSON.stringify(authUser, null, 2));
    }

    // Ki·ªÉm tra t·∫•t c·∫£ users c√≥ role admin
    console.log('\nüìã T·∫§T C·∫¢ USERS C√ì ROLE ADMIN:');
    console.log('=' * 50);

    // Th·ª≠ c·∫£ hai b·∫£ng
    const { data: adminProfiles, error: adminProfilesError } = await supabase
      .from('user_profiles')
      .select('*')
      .eq('role', 'admin');

    if (!adminProfilesError && adminProfiles) {
      console.log('‚úÖ Admin users t·ª´ user_profiles:');
      adminProfiles.forEach((user, index) => {
        console.log(`${index + 1}. Email: ${user.email}, Role: ${user.role}, ID: ${user.id}`);
      });
    }

    const { data: adminUsers, error: adminUsersError } = await supabase
      .from('users')
      .select('*')
      .eq('role', 'admin');

    if (!adminUsersError && adminUsers) {
      console.log('‚úÖ Admin users t·ª´ users:');
      adminUsers.forEach((user, index) => {
        console.log(`${index + 1}. Email: ${user.email}, Role: ${user.role}, ID: ${user.id}`);
      });
    }

  } catch (error) {
    console.error('‚ùå L·ªói:', error);
  }
}

// Ch·∫°y script
checkAdminUser()
  .then(() => {
    console.log('\n‚úÖ Ho√†n th√†nh ki·ªÉm tra!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n‚ùå L·ªói:', error);
    process.exit(1);
  }); 